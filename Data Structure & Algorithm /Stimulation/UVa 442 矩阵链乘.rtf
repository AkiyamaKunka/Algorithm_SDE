{\rtf1\ansi\ansicpg1252\cocoartf2512
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset134 PingFangSC-Regular;\f1\fswiss\fcharset0 Helvetica;\f2\fswiss\fcharset0 Helvetica-Bold;
}
{\colortbl;\red255\green255\blue255;\red251\green24\blue39;\red251\green0\blue183;\red24\green150\blue255;
\red83\green255\blue121;\red21\green133\blue255;\red82\green0\blue103;\red16\green131\blue255;\red61\green255\blue240;
\red250\green242\blue255;\red14\green110\blue109;\red82\green72\blue255;\red105\green31\blue255;}
{\*\expandedcolortbl;;\csgenericrgb\c98431\c9412\c15294;\csgenericrgb\c98431\c0\c71765;\csgenericrgb\c9412\c58824\c100000;
\csgenericrgb\c32549\c100000\c47451;\csgenericrgb\c8235\c52157\c100000;\csgenericrgb\c32157\c0\c40392;\csgenericrgb\c6275\c51373\c100000;\csgenericrgb\c23922\c100000\c94118;
\csgenericrgb\c98039\c94902\c100000;\csgenericrgb\c5490\c43137\c42745;\csgenericrgb\c32157\c28235\c100000;\csgenericrgb\c41176\c12157\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww21600\viewh17400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs48 \cf0 \'d5\'e2\'cc\'d7\'b4\'fa\'c2\'eb\'ca\'c7\'c3\'bb\'b7\'a8\'cd\'a8\'b9\'fd\'b1\'e0\'d2\'eb\'b5\'c4&sdjkalds\'c3\'bb\'ca\'b1\'bc\'e4\'d4\'d9\'d7\'f6\'d0\'de\'b8\'c4\'c1\'cb\'a3\'ac\'d6\'bb\'c4\'dc\'d4\'dd\'ca\'b1\'d7\'f7\'b0\'d5\'c1\'cbhhh \'b2\'bb\'b9\'fd\'cb\'bc\'cf\'eb\'d2\'d1\'be\'ad\'d5\'c6\'ce\'d5\'c1\'cb\'be\'cd\'ba\'c3\'a3\'ac\'be\'cd\'ca\'c7\'b6\'d4stack\'b5\'c4\'bb\'f9\'b1\'be\'b2\'d9\'d7\'f7\'d3\'b4\'a1\'ab\'a1\'ab\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs24 \cf1 \cb0 #include \cf2 <cstdio>\
\cf1 #include \cf2 <cstring>\
\cf1 #include \cf2 <iostream>\
\cf1 #include \cf2 <algorithm>\
\cf1 #include \cf2 <cmath>\
\cf1 #include \cf2 <set>\
\cf1 #include \cf2 <vector>\
\cf1 #include \cf2 <utility>\
\cf1 #include \cf2 <stack>\
\cf1 #include \cf2 <queue>\
\cf1 #include \cf2 <string>\
\cf1 #include \cf2 <cctype>\
\cf1 #include \cf2 <ctime>\
\cf1 #include \cf2 <sstream>\
\cf1 #include \cf2 <map>\
\cf3 using namespace \cf4 std\cf1 ;\
#define 
\f2\b \cf5 LOCAL\
\

\f1\b0 \cf3 struct \cf6 Matrix\cf1 \{\
    \cf3 char \cf7 name\cf1 ;\
    \cf3 int \cf7 left\cf1 ;\
    \cf3 int \cf7 right\cf1 ;\
\};\
\
\cf3 int \cf1 num;\
\cf3 int \cf1 answer;\
\
\cf3 bool \cf1 flag = \cf3 true\cf1 ;\
\
\cf6 Matrix \cf8 multi\cf1 (\cf6 Matrix \cf1 a, \cf6 Matrix \cf1 b)\{\
    \cf3 if\cf1 (a.\cf7 right\cf1 !=b.\cf7 left\cf1 )\{\
        flag = \cf3 false\cf1 ;\
        \cf3 return \cf1 a;\
    \}\
    answer += (a.\cf7 left \cf1 * b.\cf7 right\cf1 );\
    \cf6 Matrix \cf1 re = *\cf3 new \cf9 Matrix\cf1 ;\
    re.\cf7 left \cf1 = a.\cf7 left\cf1 ;\
    re.\cf7 right \cf1 = b.\cf7 right\cf1 ;\
    re.\cf7 name \cf1 = a.\cf7 name\cf1 +b.\cf7 name\cf1 ;\
    \cf3 return \cf1 re;\
\}\
\
\cf3 int \cf8 main\cf1 () \{\
#ifdef 
\f2\b \cf5 LOCAL\
    
\f1\b0 \cf9 freopen\cf1 (\cf2 "/Users/robertwong/CLionProjects/untitled5/data_in.txt"\cf1 , \cf2 "r"\cf1 , 
\f2\b \cf5 stdin
\f1\b0 \cf1 );\
    \cf10 //freopen("/Users/robertwong/CLionProjects/untitled5/data_out.txt","w",stdout);\
\cf1 #endif\
    cin\cf11 >>\cf1 num;\
    \cf6 Matrix \cf1 info[num];\
    \cf3 for \cf1 (\cf3 int \cf1 i = \cf12 0\cf1 ; i < num; i++)\{\
        cin\cf11 >>\cf1 info[i].\cf7 name\cf11 >>\cf1 info[i].\cf7 left\cf11 >>\cf1 info[i].\cf7 right\cf1 ;\
    \}\
    \cf13 string \cf1 temp;\
    \cf6 stack\cf1 <\cf6 Matrix\cf1 > compute;\
    \cf6 vector\cf1 <\cf3 int\cf1 > ans;\
    \cf3 while\cf1 (cin\cf11 >>\cf1 temp) \{\
        flag = \cf3 true\cf1 ;\
        answer = \cf12 0\cf1 ;\
        \cf3 for \cf1 (\cf3 int \cf1 j = \cf12 0\cf1 ; j < temp.\cf9 length\cf1 (); j++) \{\
            \cf3 if \cf1 (temp\cf11 [\cf1 j\cf11 ] \cf1 == \cf2 '('\cf1 ) \cf3 continue\cf1 ;\
            \cf3 else if \cf1 (temp\cf11 [\cf1 j\cf11 ] \cf1 == \cf2 ')'\cf1 ) \{\
                \cf6 Matrix \cf1 temp1 = compute.\cf9 top\cf1 ();\
                compute.\cf9 pop\cf1 ();\
                \cf6 Matrix \cf1 temp2 = compute.\cf9 top\cf1 ();\
                compute.\cf9 pop\cf1 ();\
                compute.\cf9 push\cf1 (\cf9 multi\cf1 (temp1, temp2));\
                \cf3 if \cf1 (!flag)\cf3 break\cf1 ;\
            \} \cf3 else \cf1 \{\
                \cf3 for \cf1 (\cf3 int \cf1 i = \cf12 0\cf1 ; i < num; i++) \{\
                    \cf3 if \cf1 (info[i].\cf7 name \cf1 == temp\cf11 [\cf1 j\cf11 ]\cf1 )\
                        compute.\cf9 push\cf1 (info[i]);\
                \}\
            \}\
        \}\
        \cf10 //if (!flag)cout << "error" << endl;\
        //else cout << answer << endl;\
        \cf1 cout \cf11 << \cf1 answer \cf11 << \cf9 endl\cf1 ;\
    \}\
\}\
\
\
\
}