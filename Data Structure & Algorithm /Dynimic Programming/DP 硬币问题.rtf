{\rtf1\ansi\ansicpg1252\cocoartf2512
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;\f2\fnil\fcharset0 AppleColorEmoji;
\f3\froman\fcharset0 Times-Roman;\f4\fnil\fcharset134 STSongti-SC-Regular;\f5\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red191\green100\blue38;\red32\green32\blue32;\red254\green187\blue91;
\red153\green168\blue186;\red117\green114\blue185;\red109\green109\blue109;\red86\green132\blue173;\red88\green118\blue71;
\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c99608\c73333\c35686;
\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c45882\c44706\c72549;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c33725\c51765\c67843;\csgenericrgb\c34510\c46275\c27843;
\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww25100\viewh12920\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 \
#
\f1 \'d5\'e2\'b8\'f6\'ce\'ca\'cc\'e2\'a3\'ba\'b8\'f8k\'b8\'f6\'b2\'bb\'cd\'ac\'c3\'e6\'d6\'b5\'b5\'c4\'d3\'b2\'b1\'d2\'a3\'ac\'c3\'bf\'b8\'f6\'d3\'b2\'b1\'d2\'b8\'f6\'ca\'fd\'ce\'de\'cf\'de\'a3\'ac\'c7\'f3\'d3\'b2\'b1\'d2\'d7\'dc\'b6\'ee=m\'b5\'c4\'ca\'b1\'ba\'f2\'d3\'b2\'b1\'d2\'b8\'f6\'ca\'fd\'b5\'c4\'d7\'ee\'d0\'a1\'d6\'b5\
\
\
\'cf\'c8\'c0\'b4\'bf\'b4\'b5\'da\'d2\'bb\'b8\'f6\'bd\'e2\'b4\'f0\'b7\'a8 \'b5\'dd\'b9\'e9\'a3\'ba\'d7\'d4\'b6\'a5\'cf\'f2\'cf\'c2\'bd\'e2\'be\'f6\'ce\'ca\'cc\'e2\
\
\'ca\'fd\'d1\'a7\'b9\'e9\'c4\'c9\'b7\'a8\
\
\'d0\'b4\'b3\'f6\'d7\'b4\'cc\'ac\'d7\'aa\'d2\'c6\'b7\'bd\'b3\'cc\
\'d5\'e2\'b8\'f6\'d3\'d0\'b5\'e3\'ba\'dc\'c4\'d1\'bd\'d8\'cd\'bc\
\'ce\'d2\'c3\'c7\'b5\'c4\'d7\'b4\'cc\'ac\'ca\'c7 \'bd\'f0\'b6\'ee\
\
\'d7\'aa\'d2\'c6\'b7\'bd\'b3\'cc\'ca\'c7 \'cf\'d6\'d4\'da\'d3\'b2\'b1\'d2\'b8\'f6\'ca\'fd = \'cf\'d6\'d4\'da\'d3\'b2\'b1\'d2\'b8\'f6\'ca\'fd \'bb\'f2\'d5\'df 1 \'bc\'d3\'c9\'cf\'cf\'d6\'d4\'da\'d3\'b2\'b1\'d2\'b8\'f6\'ca\'fd\
\'d4\'da\'b6\'fe\'d5\'df\'d6\'ae\'bc\'e4\'d1\'a1\'c8\'a1\'d7\'ee\'d0\'a1\'d6\'b5\
\
\'d3\'c3\'d2\'bb\'b8\'f6for \'b1\'e9\'c0\'fa coins \'bb\'f1\'c8\'a1\'c8\'ab\'b2\'bf\'b5\'c4\'d0\'c5\'cf\'a2\
\
\'ca\'b1\'bc\'e4\'b8\'b4\'d4\'d3\'b6\'c8\'b7\'d6\'ce\'f6  = \'d7\'d3\'ce\'ca\'cc\'e2\'d7\'dc\'ca\'fd 
\f2 *
\f1 \'d7\'d3\'ce\'ca\'cc\'e2\'cf\'fb\'ba\'c4\'ca\'b1\'bc\'e4
\f2 \

\f1 \'d7\'d3\'ce\'ca\'cc\'e2\'ca\'c7\'b5\'dd\'b9\'e9\'ca\'f7\'b5\'c4\'c8\'ab\'b2\'bf\'bd\'da\'b5\'e3\'b8\'f6\'ca\'fd emm n\'b5\'c4k\'b4\'ce\'b7\'bd\'d6\'b8\'ca\'fd\'bc\'b6\'b1\'f0\'a1\'ad\'a1\'ad
\f0 \
\
\
def \cf4 coin_amount\cf5 (coins: List[\cf6 int\cf5 ]\cf2 , \cf5 amount: \cf6 int\cf5 ):\
    \cf2 def \cf4 dp\cf5 (n):  \cf7 # n is the amount of money, and we return the number of coins\
        \cf2 if \cf5 n < \cf8 0\cf5 :\
            \cf2 return \cf5 -\cf8 1\
        \cf2 if \cf5 n == \cf8 0\cf5 :\
            \cf2 return \cf8 0\
        \cf5 res = \cf6 float\cf5 (\cf9 'INF'\cf5 )  \cf7 # to prevent that if all the coins are bigger than the amount of money we need\
        \cf2 for \cf5 coin \cf2 in \cf5 coins:\
            \cf2 if \cf5 n - coin >= \cf8 0\cf5 :\
                res = \cf6 min\cf5 (res\cf2 , \cf8 1 \cf5 + dp(n - coin))\
        \cf2 return \cf5 res \cf2 if \cf5 res != \cf6 float\cf5 (\cf9 'INF'\cf5 ) \cf2 else \cf5 -\cf8 1\
    \cf2 return \cf5 dp(amount)\
\
\
\
\
\
\
\

\f1 \'bd\'d3\'cf\'c2\'c0\'b4\'ca\'c7\'bc\'c7\'d2\'e4\'bb\'af\'cb\'d1\'cb\'f7\'a3\'ba
\f0 \

\f1 \'c8\'bb\'ba\'f3\'d4\'d9\'bf\'b4\'d2\'bb\'cf\'c2\'d5\'e2\'b8\'f6\'bc\'d3\'c1\'cb\'b8\'f6\'b1\'b8\'cd\'fc\'c2\'bc\'d5\'e2\'d1\'f9\'be\'cd\'ca\'a1\'c8\'a5\'c1\'cb\'ba\'dc\'b6\'e0\'d6\'d8\'b8\'b4\'bc\'c6\'cb\'e3\'a1\'a3\
\'d7\'d3\'ce\'ca\'cc\'e2\'b5\'c4\'b8\'f6\'ca\'fd \'d7\'ee\'b6\'e0\'be\'cd\'ca\'c7\'bd\'f0\'b6\'eeamount\
\'ca\'b1\'bc\'e4\'b8\'b4\'d4\'d3\'b6\'c8\'be\'cd\'ca\'c7O(n)\'bc\'b6\'b1\'f0
\f0 \
\
\
\cf2 def \cf4 coin_amount\cf5 (coins: List[\cf6 int\cf5 ]\cf2 , \cf5 amount: \cf6 int\cf5 ):\
    memo = \cf6 dict\cf5 ()\
    \cf2 def \cf4 dp\cf5 (n):  \cf7 # n is the amount of money, and we return the number of coins\
        \cf2 if \cf5 n \cf2 in \cf5 memo:\
            memo[n]\
        \cf2 if \cf5 n < \cf8 0\cf5 :\
            \cf2 return \cf5 -\cf8 1\
        \cf2 if \cf5 n == \cf8 0\cf5 :\
            \cf2 return \cf8 0\
        \cf5 res = \cf6 float\cf5 (\cf9 'INF'\cf5 )  \cf7 # to prevent that if all the coins are bigger than the amount of money we need\
        \cf2 for \cf5 coin \cf2 in \cf5 coins:\
            \cf2 if \cf5 n - coin >= \cf8 0\cf5 :\
                res = \cf6 min\cf5 (res\cf2 , \cf8 1 \cf5 + dp(n - coin))\
                memo[n] = res\
        \cf2 return \cf5 memo[n] \cf2 if \cf5 res != \cf6 float\cf5 (\cf9 'INF'\cf5 ) \cf2 else \cf5 -\cf8 1\
    \cf2 return \cf5 dp(amount)\
\
\

\f1 \'d5\'e2\'b8\'f6\'ca\'c7\'d7\'d4\'b5\'d7\'cf\'f2\'c9\'cf\'b5\'c4\'d0\'b4\'b7\'a8\
\pard\pardeftab720\partightenfactor0

\f3 \cf10 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 PS
\f4 \'a3\'ba\'ce\'aa\'c9\'b6
\f3  
\f5 dp
\f3  
\f4 \'ca\'fd\'d7\'e9\'b3\'f5\'ca\'bc\'bb\'af\'ce\'aa
\f3  
\f5 amount + 1
\f3  
\f4 \'c4\'d8\'a3\'ac\'d2\'f2\'ce\'aa\'b4\'d5\'b3\'c9
\f3  
\f5 amount
\f3  
\f4 \'bd\'f0\'b6\'ee\'b5\'c4\'d3\'b2\'b1\'d2\'ca\'fd\'d7\'ee\'b6\'e0\'d6\'bb\'bf\'c9\'c4\'dc\'b5\'c8\'d3\'da
\f3  
\f5 amount
\f4 \'a3\'a8\'c8\'ab\'d3\'c3
\f3  1 
\f4 \'d4\'aa\'c3\'e6\'d6\'b5\'b5\'c4\'d3\'b2\'b1\'d2\'a3\'a9\'a3\'ac\'cb\'f9\'d2\'d4\'b3\'f5\'ca\'bc\'bb\'af\'ce\'aa
\f3  
\f5 amount + 1
\f3  
\f4 \'be\'cd\'cf\'e0\'b5\'b1\'d3\'da\'b3\'f5\'ca\'bc\'bb\'af\'ce\'aa\'d5\'fd\'ce\'de\'c7\'ee\'a3\'ac\'b1\'e3\'d3\'da\'ba\'f3\'d0\'f8\'c8\'a1\'d7\'ee\'d0\'a1\'d6\'b5
\f0 \cf5 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf5 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf5 int coinChange(vector<int>& coins, int amount) \{\
    // 
\f1 \'ca\'fd\'d7\'e9\'b4\'f3\'d0\'a1\'ce\'aa
\f0  amount + 1
\f1 \'a3\'ac\'b3\'f5\'ca\'bc\'d6\'b5\'d2\'b2\'ce\'aa
\f0  amount + 1\
    vector<int> dp(amount + 1, amount + 1);\
    // base case\
    dp[0] = 0;\
    for (int i = 0; i < dp.size(); i++) \{\
        // 
\f1 \'c4\'da\'b2\'e3
\f0  for 
\f1 \'d4\'da\'c7\'f3\'cb\'f9\'d3\'d0\'d7\'d3\'ce\'ca\'cc\'e2
\f0  + 1 
\f1 \'b5\'c4\'d7\'ee\'d0\'a1\'d6\'b5
\f0 \
        for (int coin : coins) \{\
            // 
\f1 \'d7\'d3\'ce\'ca\'cc\'e2\'ce\'de\'bd\'e2\'a3\'ac\'cc\'f8\'b9\'fd
\f0 \
            if (i - coin < 0) continue;\
            dp[i] = min(dp[i], 1 + dp[i - coin]);\
        \}\
    \}\
    return (dp[amount] == amount + 1) ? -1 : dp[amount];\
\}}