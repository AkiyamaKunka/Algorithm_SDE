{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Medium;\f1\fnil\fcharset134 PingFangSC-Medium;\f2\fswiss\fcharset0 Helvetica;
\f3\fnil\fcharset134 PingFangSC-Regular;\f4\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red51\green51\blue51;\red255\green255\blue255;\red251\green0\blue183;
\red21\green133\blue255;\red82\green0\blue103;\red82\green72\blue255;\red105\green31\blue255;\red16\green131\blue255;
\red61\green255\blue240;\red14\green110\blue109;\red250\green242\blue255;}
{\*\expandedcolortbl;;\cssrgb\c25882\c25882\c25882;\cssrgb\c100000\c100000\c100000;\csgenericrgb\c98431\c0\c71765;
\csgenericrgb\c8235\c52157\c100000;\csgenericrgb\c32157\c0\c40392;\csgenericrgb\c32157\c28235\c100000;\csgenericrgb\c41176\c12157\c100000;\csgenericrgb\c6275\c51373\c100000;
\csgenericrgb\c23922\c100000\c94118;\csgenericrgb\c5490\c43137\c42745;\csgenericrgb\c98039\c94902\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww21600\viewh17400\viewkind0
\deftab720
\pard\pardeftab720\sl320\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://leetcode-cn.com/problems/word-ladder-ii/"}}{\fldrslt 
\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 126. 
\f1 \'b5\'a5\'b4\'ca\'bd\'d3\'c1\'fa
\f0  II}}
\f2\fs48 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f3 \cf0 \'d5\'e2\'b8\'f6\'b4\'fa\'c2\'eb\'b2\'bb\'c4\'dc
\f2 AC
\f3 \'a3\'ac\'b9\'c0\'bc\'c6\'ca\'c7
\f2 vector
\f3 \'d4\'bd\'bd\'e7\'c1\'cb\'a1\'a3\'ce\'d2\'cf\'d6\'d4\'da\'d3\'d0\'d2\'bb\'d0\'a9\'cf\'eb\'cd\'c2\'a3\'ac\'cb\'f9\'d2\'d4\'be\'cd\'b2\'bbdebug\'c1\'cb\'a3\'ac\'bb\'b9\'b5\'c3\'d0\'b4\'b6\'ed\'c2\'de\'cb\'b9\'b7\'bd\'bf\'e9\
555
\f2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs24 \cf1 \cb0 \

\f4 \cf4 class \cf5 Solution \cf1 \{\
\cf4 public\cf1 :\
    \cf4 int \cf6 dx\cf1 [\cf7 4\cf1 ] = \{\cf7 0\cf1 , \cf7 1\cf1 , -\cf7 1\cf1 , \cf7 0\cf1 \};\
    \cf4 int \cf6 dy\cf1 [\cf7 4\cf1 ] = \{\cf7 1\cf1 , \cf7 0 \cf1 ,\cf7 0\cf1 ,-\cf7 1\cf1 \};\
    \cf4 struct \cf5 Node \cf1 \{\
        \cf4 int \cf6 index\cf1 ;\
        \cf5 vector\cf1 <\cf4 int\cf1 > \cf6 path\cf1 ;\
    \};\
\
    \cf5 vector\cf1 <\cf5 vector\cf1 <\cf8 string\cf1 >> \cf9 findLadders\cf1 (\cf8 string \cf1 beginWord, \cf8 string \cf1 endWord, \cf5 vector\cf1 <\cf8 string\cf1 >& wordList) \{\
        \cf4 int \cf1 sizeWord = beginWord.\cf10 length\cf1 ();\
        \cf4 int \cf1 size = wordList.\cf10 size\cf1 ();\
\
        \cf5 vector\cf1 <\cf5 vector\cf1 <\cf4 int\cf1 >> info(size,\cf5 vector\cf1 <\cf4 int\cf1 >(size));\
\
        \cf4 for \cf1 (\cf4 int \cf1 i = \cf7 0\cf1 ; i < size; i++)\{\
            \cf4 for \cf1 (\cf4 int \cf1 k = i+\cf7 1\cf1 ; k < size; k++) \{\
                \cf4 int \cf1 cnt = \cf7 0\cf1 ;\
                \cf4 int \cf1 j = \cf7 0\cf1 ;\
                \cf4 for \cf1 ( ; j < sizeWord; j++) \{\
                    \cf4 if \cf1 (wordList\cf11 [\cf1 i\cf11 ][\cf1 j\cf11 ] \cf1 == wordList\cf11 [\cf1 k\cf11 ][\cf1 j\cf11 ]\cf1 ) \{\
                        cnt++;\
                    \}\
                \}\
                \cf4 if\cf1 (cnt == sizeWord-\cf7 1\cf1 )\
                    info\cf11 [\cf1 i\cf11 ][\cf1 j\cf11 ] \cf1 = info\cf11 [\cf1 j\cf11 ][\cf1 i\cf11 ] \cf1 = \cf7 1\cf1 ;\
            \}\
        \}\
        \cf5 vector\cf1 <\cf5 vector\cf1 <\cf8 string\cf1 >> ans;\cf12 //
\f3 \'d7\'ee\'d6\'d5\'b5\'c4\'b4\'f0\'b0\'b8
\f4 \
\
        \cf4 for \cf1 (\cf4 int \cf1 l = \cf7 0\cf1 ; l < size; l++)\{\
            \cf4 int \cf1 cnt = \cf7 0\cf1 ;\
            \cf4 int \cf1 i = \cf7 0\cf1 ;\
            \cf4 for \cf1 (; i < sizeWord; i++)\{\
                \cf4 if\cf1 (beginWord\cf11 [\cf1 i\cf11 ]\cf1 ==wordList\cf11 [\cf1 l\cf11 ][\cf1 i\cf11 ]\cf1 )\
                    cnt++;\
            \}\
            \cf4 if\cf1 (cnt == sizeWord - \cf7 1\cf1 )\{\cf12 //
\f3 \'d5\'d2\'b5\'bd\'c1\'cb\'cd\'bc\'b5\'c4\'c8\'eb\'bf\'da
\f4 \
                \cf5 queue\cf1 <\cf5 Node\cf1 > wait;\
                \cf5 Node \cf1 first;\
                first.\cf6 index \cf1 = i;\
                first.\cf6 path\cf1 .\cf10 push_back\cf1 (i);\
\
                wait.\cf10 push\cf1 (first); \cf12 //
\f3 \'b0\'d1\'b5\'da\'d2\'bb\'b8\'f6\'d4\'aa\'cb\'d8\'cd\'c6\'c8\'eb
\f4 queue
\f3 \'d6\'d0
\f4 \
                \cf4 while\cf1 (!wait.\cf10 empty\cf1 ())\{\
                    \cf5 Node \cf1 cur = wait.\cf10 front\cf1 ();\
                    \cf5 vector\cf1 <\cf4 int\cf1 >curPath(cur.\cf6 path\cf1 );\
                    wait.\cf10 pop\cf1 ();\
                    \cf4 for \cf1 (\cf4 int \cf1 j = \cf7 0\cf1 ; j <size ; j++)\{\
                        \cf4 if\cf1 ( info\cf11 [\cf1 i\cf11 ][\cf1 j\cf11 ] \cf1 )\{\
                            \cf4 if\cf1 (!cur.\cf6 path\cf11 [\cf1 j\cf11 ]\cf1 )\{\
                                \cf4 continue\cf1 ;\
                            \}\
                            \cf5 Node \cf1 newOne;\
                            newOne.\cf6 index \cf1 = j;\
                            curPath.\cf10 push_back\cf1 (j);\
                            newOne.\cf6 path \cf11 = \cf1 curPath;\
                            wait.\cf10 push\cf1 (newOne);\
                            \cf4 if\cf1 (wordList\cf11 [\cf1 j\cf11 ] == \cf1 endWord)\{\
                                \cf4 for \cf1 (\cf4 int \cf1 k = \cf7 0\cf1 ; k <newOne.\cf6 path\cf1 .\cf10 size\cf1 () ; k++)\{\
                                    ans\cf11 [\cf1 ans.\cf10 size\cf1 ()-\cf7 1\cf11 ]\cf1 .\cf10 resize\cf1 (newOne.\cf6 path\cf1 .\cf10 size\cf1 ());\
                                    ans\cf11 [\cf1 ans.\cf10 size\cf1 ()-\cf7 1\cf11 ][\cf1 k\cf11 ] = \cf1 newOne.\cf6 path\cf11 [\cf1 k\cf11 ]\cf1 ;\
                                \}\
                            \}\
                        \}\
                    \}\
                \}\
\
            \}\
        \}\
        \cf4 return \cf1 ans;\
    \}\
\};\
}